(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{613:function(e,t,a){"use strict";a.r(t),a.d(t,"metadata",function(){return T}),a.d(t,"_frontmatter",function(){return S}),a.d(t,"default",function(){return k});a(3);var n=a(2),s=a.n(n),o=(a(1),a(0)),c=a(5),l=a(8),i=(a(20),a(6)),r=a(16),b=a(191),p=a(192),d=a(193),u=a(194),m=a(195),j=a(196),O=a(197),h=a(198),g=a(199),N=a(200),f=a(201),w=a(202),v=a(203),y=a(204),T=(a(358),{orderId:5,author:"–ù–∏–∫–∏—Ç–∞ –ö—Ä–∞—Å–Ω–æ–≤",title:"Getting started with ASP.NET Core",description:"–ü–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –≥–¥–µ —Ä–µ—á—å –ø–æ–π–¥–µ—Ç –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö <strong>.NET Core</strong>, –ù–∏–∫–∏—Ç–∞ –ø–æ–∫–∞–∂–µ—Ç –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ <strong>ASP.NET Core</strong> —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <strong>ASP.NET Core Web API</strong>, –∑–∞–∫–æ–¥–∏—Ç —Å–µ—Ä–≤–∏—Å—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã, –∞ –∑–∞—Ç–µ–º –æ–±—ä—è—Å–Ω–∏—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ dependency injection, —Ä–æ—É—Ç–∏–Ω–≥ –∏ middleware.",keywords:["hola","guapa"],publishedAt:"2019-05-20 18:00:00"}),S={},x={metadata:T,_frontmatter:S},C=c.f;function k(e){var t=e.components,a=s()(e,["components"]);return Object(o.b)(C,Object.assign({},x,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",null,Object(o.b)("h1",null,Object(o.b)("strong",null,"Getting started with ASP.NET Core"))),Object(o.b)("div",null,Object(o.b)("div",{className:"author"},Object(o.b)("div",{className:"avatar-wrapper"},Object(o.b)("object",{className:"avatar-object",data:r.b,role:"img","aria-label":"My profile picture"})),Object(o.b)("div",{className:"profile"},Object(o.b)("h3",{className:"name"},"–ù–∏–∫–∏—Ç–∞ –ö—Ä–∞—Å–Ω–æ–≤"),Object(o.b)("ul",{className:"contacts"},Object(o.b)("li",null,Object(o.b)("a",{href:"https://www.facebook.com/krsnv",rel:"author",className:"facebook"},Object(o.b)(l.a,{icon:i.b,className:"icon",mdxType:"FontAwesomeIcon"}),Object(o.b)("span",null,"Nikita Krasnov"))),Object(o.b)("li",null,Object(o.b)("a",{href:"https://github.com/EclipticaSonos",rel:"author",className:"github"},Object(o.b)(l.a,{icon:i.c,className:"icon",mdxType:"FontAwesomeIcon"}),Object(o.b)("span",null,"EclipticaSonos"))),Object(o.b)("li",null,Object(o.b)("a",{href:"https://www.linkedin.com/in/nikita-krasnov-b51244116/",rel:"author",className:"linkedin"},Object(o.b)("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"fab","data-icon":"linkedin",className:"svg-inline--fa fa-linkedin fa-w-14 icon",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 448 512"},Object(o.b)("path",{fill:"currentColor",d:"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"})),Object(o.b)("span",null,"nikita-krasnov")))),Object(o.b)("p",{className:"about"},"–ù–∏–∫–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ ",Object(o.b)("a",{href:"https://binary-studio.com"},Object(o.b)("strong",null,"Binary Studio"))," –±—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –∞–ª–∫–æ–≥–æ–ª—å, –∑–∞—Ç–æ —É–≤–µ—Ä–µ–Ω–Ω–æ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç .NET-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –º—É–∑—ã–∫—É, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ñ—É—Ç–±–æ–ª–∫–∏ —Å –ø—Ä–∏–Ω—Ç–∞–º–∏ –º–µ–º–æ–≤. –ü–æ—Å–µ—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–∏—Ç–∞–ø—ã –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, –∏ –≤–∞–º —Å–æ–≤–µ—Ç—É–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ‚Äî –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º –∫ —ç—Ç–æ–π –ª–µ–∫—Ü–∏–∏ üòâ."))),Object(o.b)("div",{className:"bubble",style:{margin:"-0.5em 1em 1em"}},Object(o.b)("strong",null,"–ü—Ä–∏–≤–µ—Ç, —Ä–µ–±—è—Ç–∞!")," üëã",Object(o.b)("br",null),"–Ø –¥–µ–ª–∞—é –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –ª–µ–∫—Ü–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∞–∂–Ω–æ —É–º–µ—Ç—å —á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–¥–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –ü–æ –ø—É—Ç–∏ —è –¥–∞–º –≤–∞–º —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –≤—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–ª–∏, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫, –∏ –∫ –∫–æ–Ω—Ü—É —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ —É –≤–∞—Å –±—É–¥–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ ASP.NET Core. –≠—Ç–æ ‚Äî –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–∞—è –ª–µ–∫—Ü–∏—è, —Ç–∞–∫ —á—Ç–æ:",Object(o.b)("ol",{className:"compact inverted"},Object(o.b)("li",null,"–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—â–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç—å –∑–∞–≥—É–≥–ª–∏—Ç—å —Å–∞–º–æ–º—É;"),Object(o.b)("li",null,"–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∂–µ –≤—Å—ë —ç—Ç–æ –∑–Ω–∞–µ—Ç–µ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç).")),"–ü–æ–≥–Ω–∞–ª–∏! ",Object(o.b)("span",{className:"tooltip","data-tooltip":"–î–∞, —è –ª—é–±–ª—é —Å–∞–º–æ–∫–∞—Ç—ã!"},"üõ¥"))),Object(o.b)("div",{id:"table-of-contents",className:"table-of-contents",style:{marginTop:"1em"}},Object(o.b)(c.m,{timeline:[{linkTo:"#intro-to-dotnet-core",title:"Intro to .NET Core"},{linkTo:"#creating-an-app",title:"Creating an app"},{linkTo:"#controllers-and-services",title:"Controllers and services"},{linkTo:"#additional-features",title:"Additional Features"}],mdxType:"TimelineOfContents"})),Object(o.b)(c.g,{id:"intro-to-dotnet-core",number:"1",name:Object(o.b)("span",null,"Intro to ",Object(o.b)("a",{href:"https://dotnet.microsoft.com/download"},".NET Core")),difficulty:"No worries.",objectives:"Familiarize yourself with .NET Core fundamentals because you are going to be buddies.",mdxType:"Level"}),Object(o.b)("p",null,Object(o.b)("h5",null,"How Microsoft came up with .NET Core")),Object(o.b)("p",null,'There were times when the term ".NET" meant Windows platform only. It imposed some restrictions for deploying because most machines have Linux as an operating system. So the guys in Microsoft gathered for a meeting and came up with .NET Core. The main idea of the framework is cross-platform apps, which means you can host your app on a variety of OS. Furthermore, it‚Äôs open-source, hence it has great community support.'),Object(o.b)("p",null,Object(o.b)("h5",null,".NET Core advantages")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Cross-platform"),Object(o.b)("br",{parentName:"li"}),"Runs on Windows, Linux, macOS"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Flexible deployment"),Object(o.b)("br",{parentName:"li"}),"The framework can be included in your app or installed side-by-side user-or machine-wide"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Command-line tools"),Object(o.b)("br",{parentName:"li"}),".NET Core has great CLI, therefore all product scenarios can be executed using command-line"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Compatibility"),Object(o.b)("br",{parentName:"li"}),".NET Core is compatible with .NET Framework, Xamarin, and Mono, via the .NET Standard Library"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Open-source"),Object(o.b)("br",{parentName:"li"}),"The .NET Core platform is open source, using MIT and Apache 2 licenses. You are welcome to contribute"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Supported by Microsoft"),Object(o.b)("br",{parentName:"li"}),"Huge corporation forces .NET Core to develop and gain new features")),Object(o.b)("p",null,Object(o.b)("h5",null,"What you can build with .NET Core")),Object(o.b)("div",{className:"columns"},Object(o.b)("div",{className:"column col-4"},Object(o.b)("div",{className:"panel"},Object(o.b)("div",{className:"panel-header"},Object(o.b)("a",{href:"https://docs.microsoft.com/en-us/aspnet/core/mvc/overview"},Object(o.b)("strong",null,"ASP.NET Core MVC"))),Object(o.b)("div",{className:"panel-body"},"Web apps which implement Model-View-Controller pattern and use Razor for HTML markdown with C# snippets"))),Object(o.b)("div",{className:"column col-4"},Object(o.b)("div",{className:"panel"},Object(o.b)("div",{className:"panel-header"},Object(o.b)("a",{href:"https://docs.microsoft.com/en-us/aspnet/core/web-api/"},Object(o.b)("strong",null,"ASP.NET Core Web API"))),Object(o.b)("div",{className:"panel-body"},"Backend app which implements business logic and can be used by any client ",Object(o.b)("em",null,"(whether it‚Äôs Angular-, React-, or WhateverFramework-based frontend, mobile apps, etc.)")))),Object(o.b)("div",{className:"column col-4"},Object(o.b)("div",{className:"panel"},Object(o.b)("div",{className:"panel-header"},Object(o.b)("a",{href:"https://docs.microsoft.com/en-us/windows/uwp/index"},Object(o.b)("strong",null,"UWP (Universal Windows Platform)"))),Object(o.b)("div",{className:"panel-body"},"Native applications for phones, laptops, tablets, Xbox, IoT")))),Object(o.b)("p",null,Object(o.b)("h5",null,"What you need to start")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},".NET Core SDK")," includes everything you need to build and run .NET Core applications. Since you are not limited to Windows only, you can choose whatever IDE or text editor you want (",Object(o.b)("a",{href:"https://visualstudio.microsoft.com/"},Object(o.b)("strong",null,"Visual Studio")),", ",Object(o.b)("a",{href:"https://code.visualstudio.com/"},Object(o.b)("strong",null,"Visual Studio Code")),", ",Object(o.b)("a",{href:"https://www.jetbrains.com/rider/"},Object(o.b)("strong",null,"JetBrains Rider")),", ",Object(o.b)("a",{href:"https://www.sublimetext.com/"},Object(o.b)("strong",null,"Sublime")),", ",Object(o.b)("a",{href:"https://atom.io/"},Object(o.b)("strong",null,"Atom")),", and so on). You are able to write code using your favorite tool and execute needed actions using the CLI. Some useful CLI commands are:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"dotnet new")," ‚Äî initializes a sample console C# project"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"dotnet restore")," ‚Äî restores the dependencies for a given application"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"dotnet build")," ‚Äî builds a .NET Core application"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"dotnet publish")," ‚Äî publishes a .NET portable or self-contained application"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"dotnet run")," ‚Äî runs the application from source"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"dotnet test")," ‚Äî runs tests using a test runner specified in the project.json"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"dotnet pack")," ‚Äî creates a NuGet package of your code"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},".NET Core Runtime")," includes just the resources required to run existing .NET Core applications (this runtime is included in the SDK)"))),Object(o.b)(c.g,{id:"creating-an-app",number:"2",name:"Creating an app",difficulty:"Gets warmer, typing is required.",objectives:Object(o.b)("span",null,"Learn ",Object(o.b)("code",null,"dotnet new"),", understand the anatomy of ASP.NET Core app."),mdxType:"Level"}),Object(o.b)("p",null,Object(o.b)("h5",null,"What is ASP.NET Core ",Object(o.b)("sup",null,Object(o.b)("strong",null,Object(o.b)("a",{href:"https://dotnet.microsoft.com/learn/web/what-is-aspnet-core"},"[1]")," ",Object(o.b)("a",{href:"https://docs.microsoft.com/en-us/aspnet/core/"},"[2]"))))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"ASP.NET")," is a popular web-development framework for building web apps on the .NET platform. ",Object(o.b)("strong",{parentName:"p"},"ASP.NET Core")," is the open-source version of ASP.NET, that runs on macOS, Linux, and Windows. It was first released in 2016 and is a re-design of earlier Windows-only versions of ASP.NET. In comparison to ASP.NET, Core version provides:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Cleaner and modular architecture"),Object(o.b)("li",{parentName:"ul"},"Tighter security"),Object(o.b)("li",{parentName:"ul"},"Reduced servicing"),Object(o.b)("li",{parentName:"ul"},"Improved performance")),Object(o.b)("p",null,Object(o.b)("h5",null,"Why use it")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Integration of modern client-side frameworks and development workflows"),Object(o.b)("li",{parentName:"ul"},"A cloud-ready environment-based configuration system"),Object(o.b)("li",{parentName:"ul"},"Built-in dependency injection"),Object(o.b)("li",{parentName:"ul"},"New light-weight and modular HTTP request pipeline"),Object(o.b)("li",{parentName:"ul"},"Ability to host on IIS or self-host in your own process"),Object(o.b)("li",{parentName:"ul"},"Built on .NET Core, which supports true side-by-side app versioning"),Object(o.b)("li",{parentName:"ul"},"Ships entirely as NuGet packages"),Object(o.b)("li",{parentName:"ul"},"New tooling that simplifies modern web development"),Object(o.b)("li",{parentName:"ul"},"Build and run cross-platform ASP.NET apps on Windows, Linux, and macOS"),Object(o.b)("li",{parentName:"ul"},"Open-source and community focused")),Object(o.b)("p",null,Object(o.b)("h5",null,"Create a new app by running ",Object(o.b)("code",null,"dotnet new webapi")," ",Object(o.b)("sup",null,Object(o.b)("strong",null,Object(o.b)("a",{href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup?view=aspnetcore-2.2"},"[1]"))))),Object(o.b)("ul",null,Object(o.b)("li",{className:"details"},Object(o.b)("input",{type:"checkbox",id:"accordion-2-1"}),Object(o.b)("label",{className:"summary",htmlFor:"accordion-2-1"},Object(o.b)("strong",null,"Program.cs")),Object(o.b)("div",{className:"details-body"},"This is how the entry point looks like:",Object(o.b)(b.default,{mdxType:"SnippetL02S01"}))),Object(o.b)("li",{className:"details"},Object(o.b)("input",{type:"checkbox",id:"accordion-2-2"}),Object(o.b)("label",{className:"summary",htmlFor:"accordion-2-2"},Object(o.b)("strong",null,"Startup.cs")),Object(o.b)("div",{className:"details-body"},Object(o.b)("ul",null,Object(o.b)("li",null,Object(o.b)("code",null,"Configure")," ‚Äî how the application will respond to individual HTTP requests (you can setup pipelines which will process requests):",Object(o.b)(p.default,{mdxType:"SnippetL02S02"})),Object(o.b)("li",null,Object(o.b)("code",null,"ConfigureServices")," ‚Äî method for configuring services that are used by your application:",Object(o.b)(d.default,{mdxType:"SnippetL02S03"})))))),Object(o.b)(c.g,{id:"controllers-and-services",number:"3",name:"Controllers and services",difficulty:"No kidding.",objectives:"Learn that services are no joke and business logic shouldn't live in controllers.",mdxType:"Level"}),Object(o.b)("p",null,"I‚Äôm going to show you how we can write API using ",Object(o.b)("strong",{parentName:"p"},"ASP.NET Core Web API"),". We will be able to get a list of users and get the user by id. ",Object(o.b)("a",{href:"https://jsonplaceholder.typicode.com/"},Object(o.b)("strong",null,"JsonPlaceholder"))," will be used for the data set."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"First, let‚Äôs run the application we‚Äôve just created. You can use ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"dotnet run")," command to start the server. To make sure that our API is working, we should send a request to the ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"ValuesController")," that was created by default. Open ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://localhost:5001/api/values"}),Object(o.b)("strong",{parentName:"a"},"https://localhost:5001/api/values"))," ‚Äî you should receive ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),'["value1","value2"]')," JSON as a response."),Object(o.b)("div",{className:"bubble small subtle"},"–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Postman –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ API, –Ω–æ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è VSCode ‚Äï ",Object(o.b)("a",{href:"https://marketplace.visualstudio.com/items?itemName=humao.rest-client"},Object(o.b)("strong",null,"REST Client")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Let‚Äôs practice a bit more and create a new ",Object(o.b)("strong",{parentName:"p"},"Web API Controller")," controller. Create a new file called ",Object(o.b)("strong",{parentName:"p"},"UsersController.cs")," in the ",Object(o.b)("strong",{parentName:"p"},"Controllers")," folder. Add two GET methods which will return a list of users and a user by his id. Use ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"ValuesController")," as an example. Eventually, you should have something like this:"),Object(o.b)("ul",null,Object(o.b)("li",{className:"details"},Object(o.b)("input",{type:"checkbox",id:"accordion-3-1"}),Object(o.b)("label",{className:"summary",htmlFor:"accordion-3-1"},Object(o.b)("strong",null,"UsersController.cs")),Object(o.b)("div",{className:"details-body"},Object(o.b)(u.default,{mdxType:"SnippetL03S01"}))))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Start the application and go check ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://localhost:5001/api/users"}),Object(o.b)("strong",{parentName:"a"},"https://localhost:5001/api/users"))," to make sure that your new controller is available.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Writing business logic in controllers isn‚Äôt the best idea, so it would be better if we created a separate service for this purpose ‚Äî let's call it ",Object(o.b)("strong",{parentName:"p"},"UserService"),":"),Object(o.b)("ul",null,Object(o.b)("li",{className:"details"},Object(o.b)("input",{type:"checkbox",id:"accordion-3-3"}),Object(o.b)("label",{className:"summary",htmlFor:"accordion-3-3"},Object(o.b)("strong",null,"UsersService.cs")),Object(o.b)("div",{className:"details-body"},Object(o.b)(j.default,{mdxType:"SnippetL03S03"}))),Object(o.b)("li",{className:"details"},Object(o.b)("input",{type:"checkbox",id:"accordion-3-2"}),Object(o.b)("label",{className:"summary",htmlFor:"accordion-3-2"},Object(o.b)("strong",null,"UsersController.cs")),Object(o.b)("div",{className:"details-body"},Object(o.b)(m.default,{mdxType:"SnippetL03S02"}))))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the application and test ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://localhost:5001/api/users"}),Object(o.b)("strong",{parentName:"a"},"https://localhost:5001/api/users"))," again to make sure everything works as before.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"In the next step, I suggest implementing ",Object(o.b)("strong",null,"remote data loading")," using JsonPlaceholder service. In order to serialize response, we will need to add a package that works with JSON. Use ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"dotnet add package Newtonsoft.Json")," command to install the package."),Object(o.b)("ul",null,Object(o.b)("li",{className:"details"},Object(o.b)("input",{type:"checkbox",id:"accordion-3-4"}),Object(o.b)("label",{className:"summary",htmlFor:"accordion-3-4"},Object(o.b)("strong",null,"UsersController.cs")),Object(o.b)("div",{className:"details-body"},Object(o.b)(O.default,{mdxType:"SnippetL03S04"}))),Object(o.b)("li",{className:"details"},Object(o.b)("input",{type:"checkbox",id:"accordion-3-5"}),Object(o.b)("label",{className:"summary",htmlFor:"accordion-3-5"},Object(o.b)("strong",null,"UsersService.cs")),Object(o.b)("div",{className:"details-body"},Object(o.b)(h.default,{mdxType:"SnippetL03S05"})))))),Object(o.b)(c.g,{id:"additional-features",number:"4",name:"Additional features",difficulty:"Like the first one times five?",objectives:"Troubleshoot, debug, extend, and wire up your app better.",mdxType:"Level"}),Object(o.b)("p",null,Object(o.b)("h5",null,"A short review of Dependency Injection (Singleton, Scoped, Transient)")),Object(o.b)("p",null,Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2"}),Object(o.b)("strong",{parentName:"a"},"Dependency injection (DI)"))," ‚Äî software design pattern, which is a technique for achieving ",Object(o.b)("a",{href:"https://docs.microsoft.com/en-us/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#dependency-inversion"},Object(o.b)("strong",null,"Inversion of Control (IoC)"))," between classes and their dependencies. In our case ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"UsersController")," depends on ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"UsersService"),". There might be a case when ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"JsonPlaceholder")," won‚Äôt respond to our requests. In this case, we would want to use another implementation of ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"UsersService")," (use another source or provide mocked data). We would need to go through our app and change class name manually in all places where it‚Äôs used. With DI we can do it easily in one place (",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"ConfigureServices()")," in ",Object(o.b)("strong",{parentName:"p"},"Startup.cs"),"). Moreover, in .NET Core DI container can create instances of dependencies. Otherwise, we would need to do it manually in every service. In addition to that, .NET Core DI container takes on the responsibility of creating an instance of the dependency and disposing of it when it's no longer needed. There are a few service lifetime options:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Singleton")," ‚Äî services are created the first time they're requested (or when ",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"ConfigureServices")," is run and an instance is specified with the service registration). Every subsequent request uses the same instance."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Scoped")," ‚Äî services are created once per client request (connection)."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Transient")," ‚Äî services are created each time they're requested from the service container. This lifetime works best for lightweight, stateless services. Let‚Äôs apply ",Object(o.b)("strong",{parentName:"li"},"Transient")," to our ",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"UsersService"),":",Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},"Add the following code to ",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"ConfigureServices()")," in ",Object(o.b)("strong",{parentName:"li"},"Startup.cs"),":\n",Object(o.b)(g.default,{mdxType:"SnippetL04S01"})),Object(o.b)("li",{parentName:"ol"},"Update ",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"UsersController"),"‚Äôs constructor:\n",Object(o.b)(N.default,{mdxType:"SnippetL04S02"})),Object(o.b)("li",{parentName:"ol"},"Going further, we can create an interface for ",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"UsersService"),". It will let us switch services in one place. Change the previous version of service registration to the next one:\n",Object(o.b)(f.default,{mdxType:"SnippetL04S03"})),Object(o.b)("li",{parentName:"ol"},"Update ",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"UsersController")," to operate with the interface (notice how we got rid of the explicit class name):\n",Object(o.b)(w.default,{mdxType:"SnippetL04S04"})),Object(o.b)("li",{parentName:"ol"},"Don‚Äôt forget to inherit our ",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"UsersService")," from ",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"IUsersService"),":\n",Object(o.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"public class UsersService : IUsersService"))))),Object(o.b)("p",null,Object(o.b)("h5",null,"Middleware")),Object(o.b)("p",null,"Middleware is software that's assembled into an app pipeline to handle requests and responses. Long story short: the app applies all middlewares one by one for each request."),Object(o.b)("p",null,Object(o.b)("img",Object.assign({parentName:"p"},{src:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/index/_static/request-delegate-pipeline.png?view=aspnetcore-2.2",alt:"php-fpm_nginx"}))),Object(o.b)("p",null,"For example, if you want to log all the requests, you can add a pipeline (in the example below ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Console.WriteLine")," is used for simplicity, you can use any logging framework there). So, add the next code into the ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Configure")," method in ",Object(o.b)("strong",{parentName:"p"},"Startup.cs"),":\n",Object(o.b)(v.default,{mdxType:"SnippetL04S05"}),"\nNow start the app, send a request and see the console output."),Object(o.b)("p",null,Object(o.b)("h5",null,"Routing")),Object(o.b)("p",null,"Routing is responsible for mapping request URIs to endpoint selectors and dispatching incoming requests to endpoints.  Routes are defined in the app and configured when the app starts. A route can optionally extract values from the URL contained in the request, and these values can then be used for request processing. Basically, routing is a middleware. Using the picture above, imagine how request comes to the server, then it‚Äôs being processed by a chain of middlewares and then routing middleware matches URL to controller and method names. In WebAPI we define route using the ",Object(o.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Route")," attribute:\n",Object(o.b)(y.default,{mdxType:"SnippetL04S06"}),"\nWe can do the same for methods in the controller."),Object(o.b)(c.l,{mdxType:"ThatsAllFolks"}),Object(o.b)("div",{className:"bubble"},"–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç –≤–∫—Ä–∞—Ç—Ü–µ –æ–± ASP.NET Core. –ù–∞ —ç—Ç–æ–º –≤—Å—ë, —Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ üé©! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –ª–µ–∫—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ –∞–∫–∞–¥–µ–º–∏–∏. –£—Å–ø–µ—Ö–æ–≤ —Å –¥–æ–º–∞—à–∫–æ–π, —Å–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è, –ø–æ–∫–∞! ",Object(o.b)("span",{className:"tooltip","data-tooltip":"–°–∞–¥–∏—Ç—Å—è –Ω–∞ —Å–∞–º–æ–∫–∞—Ç,\n–£–µ–∑–∂–∞–µ—Ç –≤ –∑–∞–∫–∞—Ç.\n–ù–æ –æ–±–µ—â–∞–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è."},"üõ¥")))}k.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-lectures-getting-started-with-aspdotnet-core-index-mdx-a7f2fbca9058927b7655.js.map